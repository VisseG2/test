#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö ZKTeco –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä
"""

import sqlite3
import base64
import json
from datetime import datetime

DATABASE_NAME = 'zkteco_access_control.db'

def analyze_real_data():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ"""
    print("üî¨ –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    conn = sqlite3.connect(DATABASE_NAME)
    conn.row_factory = sqlite3.Row
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    print("üì± –£–°–¢–†–û–ô–°–¢–í–ê:")
    devices = conn.execute("SELECT * FROM devices").fetchall()
    for device in devices:
        print(f"  SN: {device['sn']}")
        print(f"  IP: {device['ip_address']}")
        print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {device['last_seen']}")
        print(f"  –ü—Ä–æ—à–∏–≤–∫–∞: {device['firmware_version'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
    users = conn.execute("SELECT * FROM users").fetchall()
    for user in users:
        print(f"  PIN: {user['pin']} | –ò–º—è: {user['name']}")
        print(f"  –ö–∞—Ä—Ç–∞: {user['card_no'] or '–ù–µ—Ç'}")
        print(f"  –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {user['privilege']}")
        print(f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {user['message_to_display'] or '–ù–µ—Ç'}")
        print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–æ–º–µ—Ç—Ä–∏—é
    print("üîê –ë–ò–û–ú–ï–¢–†–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:")
    biometrics = conn.execute("SELECT * FROM biometrics").fetchall()
    for bio in biometrics:
        bio_type_name = {
            0: "–û—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–∞–ª—å—Ü–∞",
            9: "–®–∞–±–ª–æ–Ω –ª–∏—Ü–∞"
        }.get(bio['bio_type'], f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø {bio['bio_type']}")
        
        print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PIN: {bio['user_pin']}")
        print(f"  –¢–∏–ø: {bio_type_name}")
        print(f"  –ü–∞–ª–µ—Ü ID: {bio['finger_id']}")
        print(f"  –†–∞–∑–º–µ—Ä —à–∞–±–ª–æ–Ω–∞: {len(bio['template_data'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª–æ —à–∞–±–ª–æ–Ω–∞
        try:
            template_start = bio['template_data'][:50]
            print(f"  –ù–∞—á–∞–ª–æ —à–∞–±–ª–æ–Ω–∞: {template_start}...")
        except:
            print("  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")
        print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    print("üìã –°–û–ë–´–¢–ò–Ø –î–û–°–¢–£–ü–ê:")
    events = conn.execute("""
        SELECT e.*, u.name 
        FROM event_logs e 
        LEFT JOIN users u ON e.user_pin = u.pin 
        ORDER BY e.event_time DESC
    """).fetchall()
    
    for event in events:
        event_type_name = {
            '1': '–£—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø',
            '27': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
            '200': '–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞',
            '201': '–î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞'
        }.get(event['event_type'], f"–°–æ–±—ã—Ç–∏–µ {event['event_type']}")
        
        verify_type_name = {
            '0': '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
            '1': '–¢–æ–ª—å–∫–æ –æ—Ç–ø–µ—á–∞—Ç–æ–∫',
            '15': '–õ–∏—Ü–æ'
        }.get(event['verification_mode'], f"–†–µ–∂–∏–º {event['verification_mode']}")
        
        print(f"  –í—Ä–µ–º—è: {event['event_time']}")
        print(f"  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {event['device_sn']}")
        print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event['user_pin']} ({event['name'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'})")
        print(f"  –°–æ–±—ã—Ç–∏–µ: {event_type_name}")
        print(f"  –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {verify_type_name}")
        print(f"  –î–≤–µ—Ä—å: {event['door_id']}")
        print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    print("‚öôÔ∏è –û–¢–õ–û–ñ–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    commands = conn.execute("SELECT * FROM pending_commands").fetchall()
    if commands:
        for cmd in commands:
            print(f"  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {cmd['device_sn']}")
            print(f"  –ö–æ–º–∞–Ω–¥–∞: {cmd['command_string']}")
            print()
    else:
        print("  –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
        print()
    
    conn.close()

def decode_biometric_template(template_data):
    """–ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω"""
    print("üß¨ –ê–ù–ê–õ–ò–ó –ë–ò–û–ú–ï–¢–†–ò–ß–ï–°–ö–û–ì–û –®–ê–ë–õ–û–ù–ê")
    print("=" * 50)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ base64
        decoded = base64.b64decode(template_data)
        print(f"–†–∞–∑–º–µ—Ä –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(decoded)} –±–∞–π—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã –≤ hex
        hex_start = ' '.join([f'{b:02x}' for b in decoded[:32]])
        print(f"–ü–µ—Ä–≤—ã–µ 32 –±–∞–π—Ç–∞ (hex): {hex_start}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–µ
        text_start = decoded[:20]
        try:
            text_decoded = text_start.decode('ascii', errors='ignore')
            if text_decoded:
                print(f"–í–æ–∑–º–æ–∂–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {text_decoded}")
        except:
            pass
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if decoded.startswith(b'MM'):
            print("–í–æ–∑–º–æ–∂–Ω–æ: —à–∞–±–ª–æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å MM (ZKTeco format)")
        elif decoded.startswith(b'ZKTPL'):
            print("–í–æ–∑–º–æ–∂–Ω–æ: —à–∞–±–ª–æ–Ω ZKTeco Template")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def analyze_command_formats():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–º–∞–Ω–¥ ZKTeco"""
    print("üìã –§–û–†–ú–ê–¢–´ –ö–û–ú–ê–ù–î ZKTECO")
    print("=" * 50)
    
    sample_commands = [
        "C:101:DATA UPDATE user Pin=1\tName=Test\tPrivilege=0\tCardNo=123\tPassword=",
        "C:102:DATA UPDATE biodata Pin=1\tNo=0\tIndex=0\tValid=1\tType=9\tTmp=base64data",
        "C:1:DATA QUERY tablename=user,fielddesc=*,filter=*",
        "C:2:DATA QUERY tablename=templatev10,fielddesc=*,filter=*",
        "C:201:ENROLL_BIO TYPE=0\tPIN=1\tRETRY=3\tOVERWRITE=1\tMODE=1"
    ]
    
    for cmd in sample_commands:
        parts = cmd.split(':', 2)
        if len(parts) >= 3:
            prefix = parts[0]
            cmd_id = parts[1]
            command = parts[2]
            
            print(f"–ö–æ–º–∞–Ω–¥–∞ ID: {cmd_id}")
            print(f"–¢–∏–ø: {command.split()[0] if command else 'N/A'}")
            print(f"–ü–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
            print()

def analyze_event_codes():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥—ã —Å–æ–±—ã—Ç–∏–π"""
    print("üìä –ö–û–î–´ –°–û–ë–´–¢–ò–ô ZKTECO")
    print("=" * 50)
    
    event_codes = {
        1: "–£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
        20: "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
        21: "–î–æ—Å—Ç—É–ø –≤ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è", 
        27: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
        28: "–¢–∞–π–º-–∞—É—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏",
        29: "–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π",
        44: "–£–¥–∞–ª–µ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å",
        45: "–¢–∞–π–º-–∞—É—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        100: "–¢—Ä–µ–≤–æ–≥–∞ –≤—Å–∫—Ä—ã—Ç–∏—è",
        200: "–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞",
        201: "–î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞",
        202: "–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞",
        222: "–£–¥–∞–ª–µ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
    }
    
    for code, description in event_codes.items():
        print(f"  {code:3d}: {description}")
    print()

def analyze_verification_modes():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîê –†–ï–ñ–ò–ú–´ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 50)
    
    verify_modes = {
        0: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        1: "–¢–æ–ª—å–∫–æ –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–∞–ª—å—Ü–∞", 
        2: "–¢–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        3: "–¢–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª—å",
        4: "–¢–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∞",
        5: "–û—Ç–ø–µ—á–∞—Ç–æ–∫ –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
        6: "–û—Ç–ø–µ—á–∞—Ç–æ–∫ –∏–ª–∏ –∫–∞—Ä—Ç–∞",
        7: "–ö–∞—Ä—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
        8: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø–µ—á–∞—Ç–æ–∫",
        9: "–û—Ç–ø–µ—á–∞—Ç–æ–∫ –∏ –ø–∞—Ä–æ–ª—å",
        10: "–ö–∞—Ä—Ç–∞ –∏ –æ—Ç–ø–µ—á–∞—Ç–æ–∫",
        11: "–ö–∞—Ä—Ç–∞ –∏ –ø–∞—Ä–æ–ª—å",
        15: "–õ–∏—Ü–æ",
        16: "–õ–∏—Ü–æ –∏ –æ—Ç–ø–µ—á–∞—Ç–æ–∫",
        17: "–õ–∏—Ü–æ –∏ –ø–∞—Ä–æ–ª—å",
        18: "–õ–∏—Ü–æ –∏ –∫–∞—Ä—Ç–∞"
    }
    
    for mode, description in verify_modes.items():
        print(f"  {mode:2d}: {description}")
    print()

if __name__ == "__main__":
    print("üîç ZKTeco Data Analyzer")
    print("=" * 60)
    
    analyze_real_data()
    analyze_command_formats()
    analyze_event_codes()
    analyze_verification_modes()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    conn = sqlite3.connect(DATABASE_NAME)
    conn.row_factory = sqlite3.Row
    bio = conn.execute("SELECT template_data FROM biometrics LIMIT 1").fetchone()
    if bio:
        decode_biometric_template(bio['template_data'])
    conn.close()
    
    print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("- –í –±–∞–∑–µ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å SN: QJT3242200020")
    print("- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("- –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –∫–æ–¥–∏—Ä—É—é—Ç—Å—è –≤ base64")
    print("- –°–æ–±—ã—Ç–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–¥—ã –æ—Ç 1 –¥–æ 255 —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É")
    print("- –ö–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ñ–æ—Ä–º–∞—Ç C:ID:COMMAND")
    print("- –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü")
