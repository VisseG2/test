#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏–º—É–ª—è—Ç–æ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ZKTeco –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
"""

import requests
import time
import json
from datetime import datetime

SERVER_URL = "http://127.0.0.1:8080"
DEVICE_SN = "SIM1234567890"
DEVICE_IP = "192.168.1.101"

def simulate_device_registration():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    print("üîå –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
    
    url = f"{SERVER_URL}/iclock/registry"
    params = {"SN": DEVICE_SN}
    
    try:
        response = requests.post(url, params=params, timeout=5)
        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    print()

def simulate_initial_handshake():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ"""
    print("ü§ù –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ...")
    
    url = f"{SERVER_URL}/iclock/cdata"
    params = {"SN": DEVICE_SN, "options": "all"}
    
    try:
        response = requests.get(url, params=params, timeout=5)
        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è: {e}")
    print()

def simulate_command_request():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üì• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —Å–µ—Ä–≤–µ—Ä–∞...")
    
    url = f"{SERVER_URL}/iclock/getrequest"
    params = {"SN": DEVICE_SN}
    
    try:
        response = requests.get(url, params=params, timeout=5)
        print(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        return response.text if response.status_code == 200 else None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–∞–Ω–¥: {e}")
        return None
    print()

def simulate_user_data_upload():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üë• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZKTeco –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã user
    user_data = """1\tpin=101\tname=–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\tcardno=123456\tprivilege=0\tpassword=\tgroup=0\tstarttime=\tendtime=
2\tpin=102\tname=–¢–µ—Å—Ç–æ–≤—ã–π –ê–¥–º–∏–Ω\tcardno=789012\tprivilege=14\tpassword=\tgroup=0\tstarttime=\tendtime="""
    
    url = f"{SERVER_URL}/iclock/cdata"
    params = {"SN": DEVICE_SN, "table": "user", "stamp": int(time.time())}
    
    try:
        response = requests.post(url, params=params, data=user_data, timeout=5)
        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    print()

def simulate_access_events():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–∞"""
    print("üö™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–∞...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
    events = [
        "pin=101\ttime=2025-06-26 15:30:00\tevent=1\tverifytype=1\teventaddr=1",  # –£—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø
        "pin=102\ttime=2025-06-26 15:31:00\tevent=1\tverifytype=15\teventaddr=1", # –î–æ—Å—Ç—É–ø –ø–æ –ª–∏—Ü—É
        "pin=999\ttime=2025-06-26 15:32:00\tevent=27\tverifytype=1\teventaddr=1", # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    ]
    
    event_data = "\n".join(events)
    
    url = f"{SERVER_URL}/iclock/cdata"
    params = {"SN": DEVICE_SN, "table": "rtlog", "stamp": int(time.time())}
    
    try:
        response = requests.post(url, params=params, data=event_data, timeout=5)
        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
    print()

def simulate_remote_verification():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    print("üîê –°–∏–º—É–ª–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é...")
    
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    auth_data = "pin=101\tpassword=\tcardno="
    
    url = f"{SERVER_URL}/iclock/cdata"
    params = {"SN": DEVICE_SN, "AuthType": "device"}
    
    try:
        response = requests.post(url, params=params, data=auth_data, timeout=5)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.text}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    print()

def simulate_biometric_upload():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üëÅÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –ø–∞–ª—å—Ü–∞ (base64)
    bio_data = "PIN=101\tTYPE=0\tNO=0\tIndex=0\tValid=1\tTMP=VGVzdCBmaW5nZXJwcmludCB0ZW1wbGF0ZSBkYXRh"
    
    url = f"{SERVER_URL}/iclock/cdata"
    params = {"SN": DEVICE_SN, "type": "BioData"}
    
    try:
        response = requests.post(url, params=params, data=bio_data, timeout=5)
        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏: {e}")
    print()

def test_server_connectivity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        response = requests.get(f"{SERVER_URL}/ping", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def run_full_simulation():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é —Ä–∞–±–æ—Ç—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ZKTeco")
    print("=" * 60)
    
    if not test_server_connectivity():
        print("‚ùå –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–∏—á–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    simulate_device_registration()
    time.sleep(1)
    
    simulate_initial_handshake()
    time.sleep(1)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    for i in range(3):
        print(f"üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ #{i+1}")
        command = simulate_command_request()
        if command and command.strip() != "OK":
            print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
        time.sleep(1)
    
    simulate_user_data_upload()
    time.sleep(1)
    
    simulate_biometric_upload()
    time.sleep(1)
    
    simulate_access_events()
    time.sleep(1)
    
    simulate_remote_verification()
    
    print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    print("ZKTeco Terminal Simulator")
    print("=" * 40)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ZKTeco")
    print("–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä—É.")
    print()
    
    choice = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é? (y/n): ").strip().lower()
    
    if choice == 'y':
        run_full_simulation()
    else:
        print("–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
